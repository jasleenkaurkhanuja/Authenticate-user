c
comment1.likes.all
response.body
c
my_post.comments.all
comment1
my_post.comments.all
response.body
c
my_post.comments.all
my_post
response.body
comment2
c
json['posts'].count
c
response.body
posts
c
posts
c
FactoryBot.build_list(:post, 10, user_id:my_user.id)
response.body
c
FactoryBot.build_list(:post, 10)
response.body
c
response.body
c
response.body
c
response.body
c
json['posts']
posts
c
response.body
shared_post
c
shared_post
response.body
blocked_user
post_only_me
c
post_only_me
friend
blocked_user
access_token
user
response.body
c
response.body
c
response.body
patch '/update', params: { name: 'JK130624' }, headers: {'Authorization'=>"Bearer#{access_token}"}
c
headers
patch '/update', params: { name: 'JK130624' }, headers: {'Authorization'=>"Bearer#{access_token}"}
response.body
c
params
headers
params
c
response.body
patch '/update'
user
access_token
headers
response.body
c
exp
payload[:exp]
c
exp.to_i
payload[:exp].to_i
c
exp.to_i
c
exp.to_i
exp
c
(Time.now - 1.day).to_i
t
c
Time.now.to_i
t
c
Time.now.to_i
t
c
Time.now.to_i
token = JsonWebToken.decode(params[:refresh_token])
params[:refresh_token]
(Time.now - 1.day).to_i
Time.now.to_i
t
c
response.body
c
@decoded_token
Time.now.to_i
t
c
Time.now.to_i
t
c
Time.now
t
c
Time.now
@decoded_token
c
@decoded_token
Time.now.to_i
@decoded_token
t
c
@decoded_token
c
@decoded_token
@user
c
@decoded_token
@user
c
Time.now
c
tc
t
c
tc
DateTime.now
t
c
DateTime.now
t>=DateTime.now
t
c
t>=DateTime.now
DateTime.now
t
c
DateTime.now.to_i
t
c
DateTime.now.to_i
t
c
DateTime.now.to_i
t
c
DateTime.now.to_i
t
c
Time.now.to_i
t>=Time.now.to_i
t
c
@decoded_token
n
c
@user
n
@decoded_token
c
@user
c
@user
c
@user
c
@user
c
@user.present?
@user
c
User.find(@decoded["user_id"])
@decoded.key?("user_id")
c
@decoded
c
t >= Time.now
t
c
 User.find(x)
x = @decoded_token["user_id"]
 User.find_by(x)
x = @decoded_token["user_id"]
 User.find_by(id:@decode_token["user_id"])
@decoded_token["user_id"]
c
@decoded_token["user_id"]
 User.find(@decode_token[:user_id])
@user
JsonWebToken.decode(params[:refresh_token])
@decoded_token
c
@decoded_token
 c
@decoded_token
c
:user
JsonWebToken.decode(params[:refresh_token])
params[:refresh_token]
@decoded_token
c
@user.profile_picture
Cloudinary::Uploader.upload(params[:profile_picture])
@user
c
'secure url'
params[:profile_picture]
@user
c
@user.profile_picture
Cloudinary::Uploader.upload(params[:profile_picture])
params[:profile_picture]
c
Cloudinary::Uploader.upload(params[:profile_picture])
params[:profile_picture]
@user
c
@user.sent_friendships.include?(reciever_id: [][4])
@user.sent_friendships
@user.sent_friendships.include?(sender_id: 8)
c
@user.sent_friendships
@user
@friends
c
@user.blocker.find_by(blocked_id: @friend.id)
@friend
c
@block
c
@block
c
@b
@blocked
@blocker
c
@b
@blocked
@blocker
c
Block.all
c
@block
c
Block.find(1)
@blocks
c
@blocks
c
@blocks
