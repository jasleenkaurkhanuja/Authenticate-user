c
@user.profile_picture
Cloudinary::Uploader.upload(params[:profile_picture])
@user
c
'secure url'
params[:profile_picture]
@user
c
@user.profile_picture
Cloudinary::Uploader.upload(params[:profile_picture])
params[:profile_picture]
c
Cloudinary::Uploader.upload(params[:profile_picture])
params[:profile_picture]
@user
c
@user.sent_friendships.include?(reciever_id: [][4])
@user.sent_friendships
@user.sent_friendships.include?(sender_id: 8)
c
@user.sent_friendships
@user
@friends
c
@user.blocker.find_by(blocked_id: @friend.id)
@friend
c
@block
c
@block
c
@b
@blocked
@blocker
c
@b
@blocked
@blocker
c
Block.all
c
@block
c
Block.find(1)
@blocks
c
@blocks
c
@blocks
@blocked.id
@blocks
Block.all
@blocks[:updated_at]
c
@blocked.id
c
@blocked
c
@decoded.key?("user_id")
@decoded
@decoded.key?(:user_id)
@decoded
c
Friendship.all
@check
c
@check
c
@otp
c
mail(to: @user.email, subject: 'Password reset OTP')
n
@user.email
c
@otp
@user
c
sender_id
sender
c
sender
c
Friendship.create(sender: @current_user, reciever: @friend, status:'pending')
@friend
c
n]
params[:comment_id]
params[:post_id]
@user
c
n
c
@like
c
@user.id
@post.likes
@like
@post
n
params
c
decoded_token["user_id"]
[user_id]
decoded_token
params[:user][:email]
decoded_token
decoded_token[:user_id]
c
decoded_token[:user_id]
user_id
decoded_token
token
decoded_token
c
@user
params
c
params
@user
c
@user
